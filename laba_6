import timeit
import math

def recursive_f(n):
    if n == 1:
        return 2
    elif n == 2:
        return 4
    else:
        sign = -1 if n % 2 else 1
        denominator = 3 * math.factorial(n)
        return sign * (recursive_f(n - 1) - recursive_f(n - 2)) / denominator

def iterative_f(n):
    if n == 1:
        return 2
    elif n == 2:
        return 4

    f_prev2 = 2  # F(1)
    f_prev1 = 4  # F(2)
    for i in range(3, n + 1):
        sign = -1 if i % 2 else 1
        denominator = 3 * math.factorial(i)
        current = sign * (f_prev1 - f_prev2) / denominator
        f_prev2, f_prev1 = f_prev1, current
    return f_prev1

# Сравнительное измерение времени
def compare_methods(max_n):
    print(f"{'n':>3} | {'F(n) рекурс.':>18} | {'Время (рекурс.)':>16} | {'F(n) итерат.':>18} | {'Время (итер.)':>16}")
    print("-" * 80)
    for n in range(1, max_n + 1):
        try:
            start = timeit.default_timer()
            rf = recursive_f(n)
            r_time = timeit.default_timer() - start
        except RecursionError:
            rf = "RecursionError"
            r_time = 0

        start = timeit.default_timer()
        itf = iterative_f(n)
        i_time = timeit.default_timer() - start

        print(f"{n:>3} | {str(rf):>18} | {r_time:>16.6e} | {itf:>18} | {i_time:>16.6e}")

max_n = 20  # Для рекурсии лучше не больше 20, итерация справится и с 100
compare_methods(max_n)
